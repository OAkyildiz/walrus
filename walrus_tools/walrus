#!/usr/bin/env python

import argparse
import rospkg
import subprocess
from catkin.find_in_workspaces import find_in_workspaces
import os.path
from os import listdir
import time
import serial
import walrus_system_configuration
import sys

rospack = rospkg.RosPack()

EMBEDDED_PROJECTS = ['main_board', 'diagnostic_board', 'boom_board']

def main():
    parser = argparse.ArgumentParser(description='Tool for configuring the WALRUS Robot', prog='walrus')
    subparsers = parser.add_subparsers()

    embedded_parser = subparsers.add_parser('embedded', help='Display the current configuration')
    embedded_subparsers = embedded_parser.add_subparsers()


    embedded_bootloader_parser = embedded_subparsers.add_parser('bootloader', help='Configure the embedded bootloader')
    embedded_bootloader_subparsers = embedded_bootloader_parser.add_subparsers()

    embedded_bootloader_upload_parser = embedded_bootloader_subparsers.add_parser('upload', help='Upload the bootloader')
    embedded_bootloader_upload_parser.set_defaults(func=embedded_bootloader_upload)
    embedded_bootloader_upload_parser.add_argument('device', help='The device to upload to')

    for project in EMBEDDED_PROJECTS:
        embedded_project_parser = embedded_subparsers.add_parser(project, help='Configure the '+project+' board')
        embedded_project_subparsers = embedded_project_parser.add_subparsers()

        embedded_project_upload_parser = embedded_project_subparsers.add_parser('upload', help='Upload the project')
        embedded_project_upload_parser.set_defaults(func=embedded_project_upload, project=project)


    system_parser = subparsers.add_parser('system', help='Display the system configuration')
    system_subparsers = system_parser.add_subparsers()

    system_status_parser = system_subparsers.add_parser('status', help='See the system configuration status')
    system_status_parser.set_defaults(func=system_status)

    system_install_parser = system_subparsers.add_parser('install', help='Install the system configuratoin')
    system_install_parser.set_defaults(func=system_install)

    args = parser.parse_args()
    return args.func(args)


def embedded_bootloader_upload(args):
    device = args.device
    print 'Uploading bootloader to: ' + device
    return subprocess.call(['rosrun', 'walrus_bootloader', 'upload.sh', device])

def embedded_project_upload(args):
    project = args.project
    device = '/dev/avr_bootloader'
    hex_filename = project+'_firmware.hex'
    board = '/dev/walrus_'+project

    #Check if the bootloader is already running
    if not 'avr_bootloader' in listdir('/dev'):
        #Issue a reset to the board
        print "Issuing reset to board..."
        try:
            ser = serial.Serial(board, 134, timeout=1)
            ser.close()
        except serial.SerialException as exp:
            print 'ERROR: ' + str(exp)
            return 1
        print "Done."

        #Wait up to 10 seconds for the bootloader to appear in the device tree
        print "Waiting for bootloader device..."
        count = 0
        found = False
        while (count < 10):
            if 'avr_bootloader' in listdir('/dev'):
                found = True
                break
            time.sleep(1)
            count += 1
        if not found:
            print 'ERROR: Bootloader device not found'
            return 1
        print "Done."

    #Wait for access to bootloader device
    print "Waiting for access to bootloader device..."
    count = 0
    found = False
    while (count < 20):
        try:
            ser = serial.Serial(device, 9600, timeout=1)
            ser.close()
            found = True
            break
        except serial.SerialException:
            count += 1
            time.sleep(1)
    if not found:
        print 'ERROR: Could not access bootloader device..'
        return 1
    print "Done."

    #Find hex file in the workspace's devel directory
    print "Searching for project's hex file..."
    hex_file_path_list = find_in_workspaces(project=project+'_firmware', path=hex_filename, first_matching_workspace_only=True)
    if len(hex_file_path_list) == 0:
        print 'ERROR: No hexfile found'
        return 1
    print "Done."

    #Upload the hex
    print "Uploading hex..."
    hex_file_path = hex_file_path_list[0]
    hex_file_dir = os.path.dirname(hex_file_path)
    print 'Uploading ' + project + ' to device: ' + device
    ret = subprocess.call(['avrdude', '-p', 'AT90USB1286', '-c', 'avr109', '-P', device, '-U', 'flash:w:'+hex_filename, '-D'], cwd=hex_file_dir)
    if (ret == 0):
        print "Done."
        return 0
    else:
        print "ERROR: Upload failed"
        return 1

def system_status(args):
    return walrus_system_configuration.status()

def system_install(args):
    return walrus_system_configuration.install()


if __name__ == "__main__":
    sys.exit(main())

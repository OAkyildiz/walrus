#!/usr/bin/env python

import argparse
import rospkg
import subprocess
from catkin.find_in_workspaces import find_in_workspaces
import os.path

rospack = rospkg.RosPack()

EMBEDDED_PROJECTS = ['main_board', 'diagnostics_board', 'boom_board']

def main():
    parser = argparse.ArgumentParser(description='Tool for configuring the WALRUS Robot', prog='walrus')
    subparsers = parser.add_subparsers()

    embedded_parser = subparsers.add_parser('embedded', help='Display the current configuration')
    embedded_subparsers = embedded_parser.add_subparsers()


    embedded_bootloader_parser = embedded_subparsers.add_parser('bootloader', help='Configure the embedded bootloader')
    embedded_bootloader_subparsers = embedded_bootloader_parser.add_subparsers()

    embedded_bootloader_upload_parser = embedded_bootloader_subparsers.add_parser('upload', help='Upload the bootloader')
    embedded_bootloader_upload_parser.set_defaults(func=embedded_bootloader_upload)
    embedded_bootloader_upload_parser.add_argument('device', help='The device to upload to')

    for project in EMBEDDED_PROJECTS:
        embedded_project_parser = embedded_subparsers.add_parser(project, help='Configure the '+project+' board')
        embedded_project_subparsers = embedded_project_parser.add_subparsers()

        embedded_project_upload_parser = embedded_project_subparsers.add_parser('upload', help='Upload the project')
        embedded_project_upload_parser.set_defaults(func=embedded_project_upload, project=project)

    args = parser.parse_args()
    args.func(args)


def embedded_bootloader_upload(args):
    device = args.device
    print 'Uploading bootloader to: ' + device
    subprocess.call(['rosrun', 'walrus_bootloader', 'upload.sh', device])

def embedded_project_upload(args):
    project = args.project
    device = '/dev/ttyACM0'
    hex_filename = project+'_firmware.hex'
    hex_file_path_list = find_in_workspaces(project=project+'_firmware', path=hex_filename, first_matching_workspace_only=True)
    if len(hex_file_path_list) > 0:
        hex_file_path = hex_file_path_list[0]
        hex_file_dir = os.path.dirname(hex_file_path)
        print 'Uploading ' + project + ' to device: ' + device
        subprocess.call(['avrdude', '-p', 'AT90USB1286', '-c', 'avrisp2', '-P', device, '-U', 'flash:w:'+hex_filename],
                        cwd=hex_file_dir)
    else:
        print 'ERROR: no hexfile found'




if __name__ == "__main__":
    main()
